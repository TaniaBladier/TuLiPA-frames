/* Generated By:JavaCC: Do not edit this line. MrsPrologInputCodec.java */
package de.saar.chorus.domgraph.codec.mrs;

import java.io.*;
import java.util.*;

import de.saar.chorus.domgraph.graph.DomGraph;
import de.saar.chorus.domgraph.graph.NodeLabels;
import de.saar.chorus.domgraph.codec.*;
import de.saar.chorus.domgraph.codec.mrs.*;

@CodecMetadata(name="mrs-prolog", extension=".mrs.pl")
public class MrsPrologInputCodec extends InputCodec implements MrsPrologInputCodecConstants {
        private Normalisation normalisation;
    private MrsCodec codec;

    @CodecConstructor
    public MrsPrologInputCodec(
        @CodecOption(name="normalisation", defaultValue="nets") Normalisation normalisation)
    {
                this((Reader) null);
                this.normalisation = normalisation;
    }

    public void decode(Reader inputStream, DomGraph graph, NodeLabels labels)
                throws IOException, ParserException, MalformedDomgraphException
    {
                codec = new MrsCodec(graph, labels, normalisation);

                try {
                    ReInit(inputStream);
                    Input();
                } catch(MalformedDomgraphException e) {
                        throw e;
                } catch(Throwable e) {
                    throw new ParserException(e);
                }
    }

//
// GRAMMAR
//
  final public void Input() throws ParseException, MalformedDomgraphException {
    String handle;
    jj_consume_token(PSOA);
    jj_consume_token(15);
    handle = Handle();
    jj_consume_token(16);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OTHER:
      Other();
      break;
    case VARIABLE:
      Variable();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(16);
    RelList();
    jj_consume_token(16);
    QeqList();
    jj_consume_token(17);
            codec.setTopHandleAndFinish(handle);
  }

  final public void RelList() throws ParseException, MalformedDomgraphException {
    jj_consume_token(18);
    Rel();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(16);
      Rel();
    }
    jj_consume_token(19);
  }

  final public void Rel() throws ParseException, MalformedDomgraphException {
    String label;
    String handle;
    Map<String, String> attrs = new TreeMap<String,String>();
    jj_consume_token(REL);
    jj_consume_token(15);
    label = Symbol();
    jj_consume_token(16);
    handle = Handle();
    jj_consume_token(16);
    Attributes(attrs);
    jj_consume_token(17);
            codec.addRelation(handle, label, attrs);
  }

  final public void Attributes(Map<String,String> attrs) throws ParseException, MalformedDomgraphException {
    jj_consume_token(18);
    Attribute(attrs);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(16);
      Attribute(attrs);
    }
    jj_consume_token(19);
  }

  final public void Attribute(Map<String,String> attrs) throws ParseException, MalformedDomgraphException {
    String attr;
    String value;
    jj_consume_token(ATTRVAL);
    jj_consume_token(15);
    attr = Symbol();
    jj_consume_token(16);
    value = Value();
    jj_consume_token(17);
            attrs.put(attr, value);
  }

  final public String Value() throws ParseException, MalformedDomgraphException {
    String v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HANDLE:
      v = Handle();
      break;
    case VARIABLE:
      v = Variable();
      break;
    case OTHER:
      v = Other();
      break;
    case SYMBOL:
      v = Symbol();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public void QeqList() throws ParseException, MalformedDomgraphException {
    jj_consume_token(HCONS);
    jj_consume_token(15);
    jj_consume_token(18);
    Qeq();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(16);
      Qeq();
    }
    jj_consume_token(19);
    jj_consume_token(17);
  }

  final public void Qeq() throws ParseException, MalformedDomgraphException {
    String h1;
    String h2;
    jj_consume_token(QEQ);
    jj_consume_token(15);
    h1 = Handle();
    jj_consume_token(16);
    h2 = Handle();
    jj_consume_token(17);
            codec.addDomEdge(h1, h2);
  }

  final public String Handle() throws ParseException, MalformedDomgraphException {
    Token t;
    t = jj_consume_token(HANDLE);
            codec.tellHandle(t.image);
            {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String Variable() throws ParseException, MalformedDomgraphException {
    Token t;
    t = jj_consume_token(VARIABLE);
            codec.tellVariable(t.image);
            {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String Other() throws ParseException {
    Token t;
    t = jj_consume_token(OTHER);
            {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String Symbol() throws ParseException {
    Token t;
    t = jj_consume_token(SYMBOL);
            // strip quotes if necessary
            if (t.image.startsWith("\'")) {
                        {if (true) return t.image.substring(1, t.image.length()-1);}
            } else {
                        {if (true) return t.image;}
            }
    throw new Error("Missing return statement in function");
  }

  public MrsPrologInputCodecTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x3000,0x10000,0x10000,0x7800,0x10000,};
   }

  public MrsPrologInputCodec(java.io.InputStream stream) {
     this(stream, null);
  }
  public MrsPrologInputCodec(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MrsPrologInputCodecTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public MrsPrologInputCodec(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MrsPrologInputCodecTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public MrsPrologInputCodec(MrsPrologInputCodecTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(MrsPrologInputCodecTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[20];
    for (int i = 0; i < 20; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
