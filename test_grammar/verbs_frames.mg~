type MARK = {subst, subst, nadj, foot, anchor, coanchor, flex}
type CAT = {np,n,v,vp,s,pp,p,by}
type PHON = {e}

type LABEL!

property mark : MARK

feature cat : CAT
feature phon : PHON
feature arg0 : LABEL
feature arg1 : LABEL
feature i : LABEL
feature e : LABEL

frame-types = {event, psych_state, activity, love, sleep, entity, person}
frame-constraints = { 
	activity -> event,
	psych_state event -> -,
	entity event -> -,
	entity psych_state -> -,
	love -> psych_state,
	sleep -> activity,
	person -> entity
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% TREE FRAGMENTS:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

class Subject
export ?VP ?S ?SubjNP ?SubjMark
declare ?S ?VP ?SubjNP ?SubjMark ?A
{ <syn> {
	node ?S [cat=s] {
		node ?SubjNP (mark=SubjMark) [cat=np, i=?A]
		node ?VP [cat=vp]
	}
  };
%  <frame>{[entity,
%	shape: [round]]};
  <iface>{[arg0=?A]}
}


class VerbProjection
export ?VP ?V ?F
declare ?VP ?V ?F ?EV
{ <syn> {
	node ?VP [cat=vp, e=?EV] {
		node ?V (mark=anchor) [cat=v]
	}
  };
    <iface>{[e=?EV]}

}

class Object
export ?VP ?V ?ObjNP ?ObjMark
declare ?VP ?V ?ObjNP ?ObjMark ?I
{ <syn> {
	node ?VP [cat=vp] {	
		node ?V [cat=v]
		node ?ObjNP (mark=ObjMark) [cat=np,i=?I]
	}
  };
  <iface>{[arg1=?I]}
  %<frame>{[entity,
  %        shape:[round]]}
}

class ExtractedNP
export ?S
declare ?Sr ?NP ?S
{
	<syn> {
	node ?Sr [cat=s] {	
		node ?NP (mark=subst) [cat=np]
		node ?S [cat=s]
	}
  }
}

class byPP
declare ?PP ?P ?By ?NP
{
  <syn>{
    node ?PP [cat=pp];
    node ?P [cat=p];
    node ?By (mark=flex) [cat=by];
    node ?NP (mark=subst) [cat=np];
    ?PP -> ?P;
    ?PP -> ?NP;
    ?P >> ?NP;
    ?P -> ?By
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% TREE TEMPLATES:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


class alphanx0V
import Subject[] VerbProjection[]
declare ?F ?X
{
  ?SubjMark=subst;
    <iface>{[cat=v, arg0=?X]};	
    <frame>{?F[sleep,  	     		
             actor:?X]}
}


class alphaW0nx0V
import Subject[] VerbProjection[] ExtractedNP[]
declare ?XP
{
  ?SubjMark=nadj;
    <syn> {
		node ?XP (mark=flex)[phon = e];
		?SubjNP -> ?XP
	}
}

class alphanx0Vnx1_mark
import Subject[] VerbProjection[] Object[]

class alphanx0Vnx1
import alphanx0Vnx1_mark[]
declare ?X ?Y ?F
{
	?SubjMark=subst;
	?ObjMark=subst;
  <iface>{[cat=v, e=?F, arg0=?X, arg1=?Y]};	
  <frame>{?F[love,
             actor:?X,
	     target:?Y]}
}


class alphaW1nx0Vnx1
import alphanx0Vnx1_mark[] ExtractedNP[]
declare ?XP
{
  ?SubjMark=subst;
  ?ObjMark=nadj;
  <syn> {
		node ?XP (mark=flex)[phon = e];
		?ObjNP -> ?XP
	}

}

class alphaW0nx0Vnx1
import alphanx0Vnx1_mark[] ExtractedNP[]
declare ?XP
{
  ?SubjMark=nadj;
  ?ObjMark=subst;
  <syn> {
		node ?XP (mark=flex)[phon = e];
		?SubjNP -> ?XP
	}

}


class propernoun
declare ?NP ?N ?X0 ?X1
{
  <syn>{
    node ?NP [cat=np, i=?X0];
    %node ?N (mark=anchor) [cat=n, mem=?X0 ];
    node ?N (mark=anchor) [cat=n, i=?X1];
    ?NP -> ?N
  };
    <frame>{?X0[person,
	name: ?X1]}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% TREE FAMILIES:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

class n0V
{
  alphanx0V[]
  |
  alphaW0nx0V[]
}

class n0Vn1
{
  alphanx0Vnx1[]
  |
  alphaW1nx0Vnx1[]
  |
  alphaW0nx0Vnx1[]
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% EVALUATION:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

value n0V
value n0Vn1
value propernoun